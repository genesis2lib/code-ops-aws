name: Code-200-Client
on:
  push:
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  id-token: write

env:
  TF_VERSION: "1.12.2"
  AWS_REGION: {{region}}

jobs:
  client-operations:
    runs-on: ubuntu-latest
    steps:
      - name: Version of AWS CLI
        run: |
          echo "AWS CLI version:"
          which aws
          aws --version

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Env setup
        run: |
          
          # Set environment variables
          echo "BRANCH={{{githubVarsOpen}}} github.ref_name  {{{githubVarsClose}}}" >> $GITHUB_ENV
          if [[ "{{{githubVarsOpen}}} github.ref_name  {{{githubVarsClose}}}" = "main" || "{{{githubVarsOpen}}} github.ref_name  {{{githubVarsClose}}}" = "production" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            BRANCH_ENV=$(echo "{{{githubVarsOpen}}} github.ref_name  {{{githubVarsClose}}}" | sed "s///-/g")
            echo "ENVIRONMENT=$BRANCH_ENV" >> $GITHUB_ENV
          fi
          
          echo "‚úÖ Environment setup completed: {{{githubVarsOpen}}} github.ref_name  {{{githubVarsClose}}}"

      - name: Credential for AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::{{{githubVarsOpen}}} vars.AWS_ACCOUNT_ID {{{githubVarsClose}}}:role/{{projectName}}-{{{githubVarsOpen}}} env.ENVIRONMENT  {{{githubVarsClose}}}-ops-deploy-s3-role
          aws-region: {{{githubVarsOpen}}} env.AWS_REGION  {{{githubVarsClose}}}

      - name: Setup Environment Info
        run: |
          echo "Event name: {{{githubVarsOpen}}} github.event_name  {{{githubVarsClose}}}"
          echo "Branch: {{{githubVarsOpen}}} env.BRANCH  {{{githubVarsClose}}}"
          echo "Environment: {{{githubVarsOpen}}} env.ENVIRONMENT  {{{githubVarsClose}}}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: {{{githubVarsOpen}}} env.TF_VERSION  {{{githubVarsClose}}}
          terraform_wrapper: false

      - name: Get Terraform Outputs
        run: |
          cd {{id}}/terraform
          echo "üîç Getting Terraform outputs for {{{githubVarsOpen}}} env.ENVIRONMENT  {{{githubVarsClose}}} environment..."
          
          # Initialize Terraform to access state
          terraform init -backend-config=backend-${ENVIRONMENT}.hcl -input=false
          
          # Get the S3 bucket and CloudFront distribution from Terraform outputs
          S3_BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
          CF_DISTRIBUTION=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
          
          if [ -z "$S3_BUCKET" ]; then
            echo "‚ùå Could not get S3 bucket from Terraform outputs"
            echo "üîç Available Terraform outputs:"
            terraform output
            echo "‚ö†Ô∏è Infrastructure may not be deployed yet - run deploy_apply first"
            exit 1
          fi
          
          if [ -z "$CF_DISTRIBUTION" ]; then
            echo "‚ùå Could not get CloudFront distribution from Terraform outputs"
            echo "üîç Available Terraform outputs:"
            terraform output
            echo "‚ö†Ô∏è Infrastructure may not be deployed yet - run deploy_apply first"
            exit 1
          fi
          
          echo "‚úÖ Found S3 bucket: $S3_BUCKET"
          echo "‚úÖ Found CloudFront distribution: $CF_DISTRIBUTION"
          echo "AWS_S3_TARGET=$S3_BUCKET" >> $GITHUB_ENV
          echo "CLOUDFRONT_TARGET=$CF_DISTRIBUTION" >> $GITHUB_ENV
          
          echo "Target S3: $S3_BUCKET"
          echo "Target CloudFront: $CF_DISTRIBUTION"
        env:
          AWS_DEFAULT_REGION: {{{githubVarsOpen}}} env.AWS_REGION  {{{githubVarsClose}}}

      - name: Check for static assets
        id: assets-check
        run: |
          # Check for assets in the {{id}} directory structure
          if [ -d "{{id}}/dist" ]; then
            echo "directory={{id}}/dist" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          elif [ -d "{{id}}/build" ]; then
            echo "directory={{id}}/build" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          elif [ -d "{{id}}/public" ]; then
            echo "directory={{id}}/public" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          elif [ -d "{{id}}/www" ]; then
            echo "directory={{id}}/www" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          elif [ -d "{{id}}/out" ]; then
            echo "directory={{id}}/out" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Static Assets Status
        run: |
          if [ "${{ steps.assets-check.outputs.found }}" == "true" ]; then
            echo "‚úÖ Static assets found in '${{ steps.assets-check.outputs.directory }}' directory"
            echo "üì§ Ready to deploy to S3 + CloudFront"
          else
            echo "‚ö†Ô∏è No static assets directory found in {{id}}/ (dist, build, public, www, or out)"
            echo "üìã To deploy static assets:"
            echo "  1. Build your application (React, Vue, Angular, Next.js, etc.)"
            echo "  2. Ensure built files are in: {{id}}/dist/, {{id}}/build/, {{id}}/public/, {{id}}/www/, or {{id}}/out/"
            echo "  3. Re-run this workflow"
            echo ""
            echo "üèóÔ∏è Skipping deployment - no assets to deploy"
          fi

      - name: Validate Assets Directory
        if: steps.assets-check.outputs.found == 'true'
        run: |
          ASSETS_DIR="${{ steps.assets-check.outputs.directory }}"
          echo "üìÇ Validating assets in '$ASSETS_DIR' directory..."
          
          # Check if directory has content
          if [ -z "$(ls -A $ASSETS_DIR 2>/dev/null)" ]; then
            echo "‚ùå Assets directory '$ASSETS_DIR' is empty"
            exit 1
          fi
          
          # List contents for verification
          echo "üìã Assets directory contents:"
          ls -la "$ASSETS_DIR"
          
          # Check total size
          SIZE=$(du -sh "$ASSETS_DIR" | cut -f1)
          echo "üìä Total assets size: $SIZE"
          
          echo "‚úÖ Assets validation completed"

      - name: Deploy - Sync S3 Bucket
        if: steps.assets-check.outputs.found == 'true'
        run: |
          ASSETS_DIR="${{ steps.assets-check.outputs.directory }}"
          echo "üì¶ Deploying assets from '$ASSETS_DIR' to S3: ${AWS_S3_TARGET}"
          echo "üåê CloudFront distribution: ${CLOUDFRONT_TARGET}"
          
          # Sync assets to S3 bucket
          echo "üöÄ Starting S3 sync..."
          aws s3 sync "$ASSETS_DIR" "s3://${AWS_S3_TARGET}" \
            --region {{{githubVarsOpen}}} env.AWS_REGION  {{{githubVarsClose}}} \
            --delete \
            --exclude "*.map" \
            --exclude ".DS_Store"
          
          echo "‚úÖ S3 sync completed"
          
      - name: Deploy - Invalidate CloudFront cache
        if: steps.assets-check.outputs.found == 'true'
        run: |
          echo "üîÑ Invalidating CloudFront cache for distribution: ${CLOUDFRONT_TARGET}"
          
          # Create cache invalidation
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id "${CLOUDFRONT_TARGET}" \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "‚úÖ Cache invalidation created: $INVALIDATION_ID"
          echo "‚è≥ Cache invalidation typically takes 1-5 minutes to complete"

