{{#hasDatabase}}
# Database configuration based on selected database type: {{selectedDatabaseType}}

resource "aws_db_subnet_group" "database" {
  name       = "${local.project_name}-${var.environment}-db-subnet-group"
  subnet_ids = aws_subnet.private[*].id

  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-db-subnet-group"
  })
}

{{#isPostgreSQL}}
resource "aws_db_parameter_group" "database" {
  family = "postgres16"
  name   = "${local.project_name}-${var.environment}-db-params"

  parameter {
    name  = "log_statement"
    value = "all"
  }

  parameter {
    name  = "log_min_duration_statement"
    value = "1000"
  }

  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-db-params"
  })

  lifecycle {
    create_before_destroy = true
  }
}
{{/isPostgreSQL}}

{{#isMySQL}}
resource "aws_db_parameter_group" "database" {
  family = "mysql8.0"
  name   = "${local.project_name}-${var.environment}-db-params"

  parameter {
    name  = "slow_query_log"
    value = "1"
  }

  parameter {
    name  = "long_query_time"
    value = "1"
  }

  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-db-params"
  })

  lifecycle {
    create_before_destroy = true
  }
}
{{/isMySQL}}

{{#isMariaDB}}
resource "aws_db_parameter_group" "database" {
  family = "mariadb10.11"
  name   = "${local.project_name}-${var.environment}-db-params"

  parameter {
    name  = "slow_query_log"
    value = "1"
  }

  parameter {
    name  = "long_query_time"
    value = "1"
  }

  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-db-params"
  })

  lifecycle {
    create_before_destroy = true
  }
}
{{/isMariaDB}}

resource "random_password" "db_password" {
  length  = 16
  special = true
  # Exclude characters that RDS doesn't allow: '/', '@', '"', ' ' (space)
  override_special = "!#$%&*+-=?^_`{|}~"
}

# Database password is now part of app_secrets in security.tf

resource "aws_db_instance" "database" {
  identifier = "${local.project_name}-${var.environment}-db"

  allocated_storage     = var.database_allocated_storage
  max_allocated_storage = var.database_allocated_storage * 2
  storage_type          = "gp3"
  storage_encrypted     = true

  {{#isPostgreSQL}}
  engine         = "postgres"
  engine_version = "16.4"
  {{/isPostgreSQL}}
  {{#isMySQL}}
  engine         = "mysql"
  engine_version = "8.0.35"
  {{/isMySQL}}
  {{#isMariaDB}}
  engine         = "mariadb"
  engine_version = "10.11.6"
  {{/isMariaDB}}
  {{#isOracle}}
  engine         = "oracle-ee"
  engine_version = "19.0.0.0.ru-2023-10.rur-2023-10.r1"
  {{/isOracle}}
  {{#isSQLServer}}
  engine         = "sqlserver-ex"
  engine_version = "15.00.4236.7.v1"
  {{/isSQLServer}}

  instance_class = var.database_instance_class

  {{#isPostgreSQL}}
  db_name  = "${replace(local.project_name, "-", "")}db"
  {{/isPostgreSQL}}
  {{#isMySQL}}
  db_name  = "${replace(local.project_name, "-", "")}db"
  {{/isMySQL}}
  {{#isMariaDB}}
  db_name  = "${replace(local.project_name, "-", "")}db"
  {{/isMariaDB}}
  {{#isOracle}}
  # Oracle doesn't use db_name parameter
  {{/isOracle}}
  {{#isSQLServer}}
  db_name  = "${replace(local.project_name, "-", "")}db"
  {{/isSQLServer}}

  username = "${replace(local.project_name, "-", "")}admin"
  password = random_password.db_password.result

  vpc_security_group_ids = [aws_security_group.rds.id]
  db_subnet_group_name   = aws_db_subnet_group.database.name
  {{#isPostgreSQL}}
  parameter_group_name   = aws_db_parameter_group.database.name
  {{/isPostgreSQL}}
  {{#isMySQL}}
  parameter_group_name   = aws_db_parameter_group.database.name
  {{/isMySQL}}
  {{#isMariaDB}}
  parameter_group_name   = aws_db_parameter_group.database.name
  {{/isMariaDB}}

  backup_retention_period = var.environment == "production" ? 7 : 1
  backup_window           = "03:00-04:00"
  maintenance_window      = "sun:04:00-sun:05:00"

  skip_final_snapshot       = var.environment != "production"
  final_snapshot_identifier = var.environment == "production" ? "${local.project_name}-${var.environment}-final-snapshot-${formatdate("YYYY-MM-DD-hhmm", timestamp())}" : null

  copy_tags_to_snapshot = true
  deletion_protection   = var.environment == "production"

  performance_insights_enabled = true
  monitoring_interval          = 60
  monitoring_role_arn          = aws_iam_role.rds_monitoring.arn

  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-database"
  })
}

resource "aws_iam_role" "rds_monitoring" {
  name = "${local.project_name}-${var.environment}-rds-monitoring-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "monitoring.rds.amazonaws.com"
        }
      }
    ]
  })

  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-rds-monitoring-role"
  })
}

resource "aws_iam_role_policy_attachment" "rds_monitoring" {
  role       = aws_iam_role.rds_monitoring.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
}
{{/isPostgreSQL}}
{{/isMySQL}}
{{/isMariaDB}}
{{/isOracle}}
{{/isSQLServer}}

{{#isMongoDB}}
# MongoDB using Amazon DocumentDB
resource "aws_docdb_cluster" "database" {
  cluster_identifier      = "${local.project_name}-${var.environment}-docdb"
  engine                  = "docdb"
  master_username         = "${replace(local.project_name, "-", "")}admin"
  master_password         = random_password.db_password.result
  backup_retention_period = var.environment == "production" ? 7 : 1
  preferred_backup_window = "03:00-04:00"
  skip_final_snapshot     = var.environment != "production"
  deletion_protection      = var.environment == "production"
  
  vpc_security_group_ids = [aws_security_group.rds.id]
  db_subnet_group_name   = aws_db_subnet_group.database.name
  
  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-docdb"
  })
}

resource "aws_docdb_cluster_instance" "database" {
  count              = 1
  identifier         = "${local.project_name}-${var.environment}-docdb-${count.index}"
  cluster_identifier = aws_docdb_cluster.database.id
  instance_class     = var.database_instance_class
  
  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-docdb-${count.index}"
  })
}
{{/isMongoDB}}

{{#isRedis}}
# Redis using Amazon ElastiCache
resource "aws_elasticache_subnet_group" "database" {
  name       = "${local.project_name}-${var.environment}-cache-subnet-group"
  subnet_ids = aws_subnet.private[*].id
  
  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-cache-subnet-group"
  })
}

resource "aws_elasticache_replication_group" "database" {
  replication_group_id       = "${local.project_name}-${var.environment}-redis"
  description                = "Redis cluster for ${local.project_name}"
  node_type                  = var.database_instance_class
  port                       = 6379
  parameter_group_name       = "default.redis7"
  num_cache_clusters         = 1
  automatic_failover_enabled = var.environment == "production"
  multi_az_enabled          = var.environment == "production"
  
  subnet_group_name  = aws_elasticache_subnet_group.database.name
  security_group_ids = [aws_security_group.redis.id]
  
  at_rest_encryption_enabled = true
  transit_encryption_enabled  = true
  
  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-redis"
  })
}
{{/isRedis}}

{{#isElasticsearch}}
# Elasticsearch using Amazon OpenSearch
resource "aws_opensearch_domain" "database" {
  domain_name    = "${local.project_name}-${var.environment}-opensearch"
  engine_version = "OpenSearch_2.11"
  
  cluster_config {
    instance_type = var.database_instance_class
    instance_count = var.environment == "production" ? 2 : 1
  }
  
  ebs_options {
    ebs_enabled = true
    volume_type = "gp3"
    volume_size = 20
  }
  
  vpc_options {
    subnet_ids         = aws_subnet.private[*].id
    security_group_ids = [aws_security_group.opensearch.id]
  }
  
  encrypt_at_rest {
    enabled = true
  }
  
  node_to_node_encryption {
    enabled = true
  }
  
  domain_endpoint_options {
    enforce_https       = true
    tls_security_policy = "Policy-Min-TLS-1-2-2019-07"
  }
  
  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-opensearch"
  })
}
{{/isElasticsearch}}

{{#isCassandra}}
# Cassandra using Amazon Keyspaces
resource "aws_keyspaces_keyspace" "database" {
  name = "${replace(local.project_name, "-", "")}_${var.environment}"
  
  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-keyspace"
  })
}
{{/isCassandra}}

{{#isCouchbase}}
# Couchbase using EC2 instances (no managed service available)
resource "aws_instance" "couchbase" {
  count         = var.environment == "production" ? 2 : 1
  ami           = data.aws_ami.amazon_linux.id
  instance_type = var.database_instance_class
  
  subnet_id              = aws_subnet.private[count.index % length(aws_subnet.private)].id
  vpc_security_group_ids = [aws_security_group.couchbase.id]
  
  user_data = base64encode(templatefile("${path.module}/couchbase-setup.sh", {
    project_name = local.project_name
    environment  = var.environment
  }))
  
  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-couchbase-${count.index + 1}"
  })
}
{{/isCouchbase}}

{{#isNeo4j}}
# Neo4j using EC2 instances (no managed service available)
resource "aws_instance" "neo4j" {
  count         = 1
  ami           = data.aws_ami.amazon_linux.id
  instance_type = var.database_instance_class
  
  subnet_id              = aws_subnet.private[0].id
  vpc_security_group_ids = [aws_security_group.neo4j.id]
  
  user_data = base64encode(templatefile("${path.module}/neo4j-setup.sh", {
    project_name = local.project_name
    environment  = var.environment
  }))
  
  tags = merge(local.common_tags, {
    Name = "${local.project_name}-${var.environment}-neo4j"
  })
}
{{/isNeo4j}}
{{/hasDatabase}}